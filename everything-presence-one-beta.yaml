substitutions:
  name: "everything-presence-beta"
  friendly_name: "Everything Presence One"
  project_name: "Everything Smart Technology.Everything Presence One"
  project_version: "1.3.0b"
  temperature_offset: "-3"
  humidity_offset: "5"
  temperature_update_interval: "60s"
  illuminance_update_interval: "30s"
  pir_delay_off: "10s"
  occupancy_delay_off: "15s"
  hidden_ssid: "false"
  # factory_reset_disabled: "true"
  # uart_target_output_disabled: "false"
  # uart_presence_output_disabled: "true"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: true
  project:
    name: "${project_name}"
    version: "${project_version}"
  includes:
    - leapmmw/leapmmw_sensor.h

esp32:
  board: esp32dev

logger:

api:

ota:

wifi:
  fast_connect: ${hidden_ssid}
  ap: {}

improv_serial:

# dashboard_import:
#   package_import_url: github://everythingsmarthome/everything-presence-one/everything-presence-one-beta.yaml@main
#   import_full_config: false

light:
  - platform: status_led
    name: ESP32 status LED
    pin: GPIO32
    entity_category: config
    disabled_by_default: True
  # - platform: binary
  #   name: mmWave LED
  #   restore_mode: RESTORE_DEFAULT_OFF
  #   output: mmwave_led_output
  #   entity_category: config
  #   disabled_by_default: True

# output:
#   - platform: template
#     id: mmwave_led_output
#     type: binary
#     write_action:
#       - switch.turn_off: mmwave_sensor
#       - delay: 1s
#       - if:
#           condition:
#             lambda: !lambda return state;
#           then:
#             - uart.write: "setLedMode 1 0"
#           else:
#             - uart.write: "setLedMode 1 1"
#       - delay: 1s
#       - uart.write: "saveConfig"
#       - delay: 3s
#       - switch.turn_on: mmwave_sensor

uart:
  id: uart_bus
  tx_pin: GPIO13
  rx_pin: GPIO14
  baud_rate: 115200

i2c:
  sda: 26
  scl: 25
  scan: true

binary_sensor:
  # - platform: gpio
  #   name: mmWave
  #   id: mmwave
  #   device_class: occupancy
  #   pin:
  #     number: GPIO15
  #     mode: INPUT_PULLDOWN

  - platform: gpio
    pin:
      number: 33
      mode: INPUT_PULLDOWN
    name: PIR
    id: pir_motion_sensor
    device_class: motion
    filters:
      - delayed_off: ${pir_delay_off}

  - platform: gpio
    name: mmWave
    id: mmwave
    device_class: motion
    pin:
      number: GPIO15
      mode: INPUT_PULLDOWN
    on_state:
      - if:
          condition:
            binary_sensor.is_off: mmwave
          then:
            - sensor.template.publish:
                id: num_targets
                state: 0
            - lambda: |-
                return clearTargets();

  - platform: template
    name: Occupancy
    id: occupancy
    device_class: occupancy
    filters:
      - delayed_off: ${occupancy_delay_off}
    lambda: |-
      if ( id(mmwave).state or id(pir_motion_sensor).state) {
        return true;
      } 
      else if (id(mmwave).state == 0 and id(pir_motion_sensor).state == 0) {
        return false;
      } 
      else {
        return id(occupancy).state;
      }
  # - platform: template
  #   name: "Target 1 Active" # Don't change
  #   disabled_by_default: False
  # - platform: template
  #   name: "Target 2 Active" # Don't change
  #   disabled_by_default: False
  # - platform: template
  #   name: "Target 3 Active" # Don't change
  #   disabled_by_default: False
  # - platform: template
  #   name: "Target 4 Active" # Don't change
  #   disabled_by_default: False

sensor:
  - platform: shtcx
    id: "shtc3_sensor"
    temperature:
      name: Temperature
      id: temperature_sensor
      filters:
        - offset: ${temperature_offset}
        - lambda: "return x + id(temperature_offset_ui).state;"
    humidity:
      name: Humidity
      id: humidity_sensor
      filters:
        - offset: ${humidity_offset}
        - lambda: "return x + id(humidity_offset_ui).state;"
    address: 0x70
    update_interval: ${temperature_update_interval}

  - platform: bh1750
    name: Illuminance
    id: illuminance_sensor
    address: 0x23
    update_interval: ${illuminance_update_interval}
    filters:
      - lambda: "return x + id(illuminance_offset_ui).state;"
  
  - platform: template
    name: Target 1 Distance # Don't change
    id: target_distance_1_m
    internal: true
    # accuracy_decimals: 2
    # disabled_by_default: False
  
  - platform: template
    name: Target 2 Distance # Don't change
    id: target_distance_2_m
    internal: true
    # accuracy_decimals: 2
    # disabled_by_default: False

  - platform: template
    name: Target 3 Distance # Don't change
    id: target_distance_3_m
    internal: true
    # accuracy_decimals: 2
    # disabled_by_default: False

  - platform: template
    name: Target 4 Distance # Don't change
    id: target_distance_4_m
    internal: true
    # accuracy_decimals: 2
    # disabled_by_default: False

  - platform: template
    name: "Target 1 SNR" # Don't change
    name: target_1_SNR
    # disabled_by_default: False
    internal: true

  - platform: template
    name: "Target 2 SNR" # Don't change
    name: target_2_SNR
    # disabled_by_default: False
    internal: true

  - platform: template
    name: "Target 3 SNR" # Don't change
    name: target_3_SNR
    # disabled_by_default: False
    internal: true

  - platform: template
    name: "Target 4 SNR" # Don't change
    name: target_4_SNR
    # disabled_by_default: False
    internal: true

  - platform: template
    name: num_targets
    id: num_targets # do not change
    accuracy_decimals: 0

  - platform: custom
    lambda: |-
      auto s = new leapmmw(id(uart_bus));
      App.register_component(s);
      return {};
    sensors:

switch:
  - platform: safe_mode
    name: use_safe_mode

  - platform: template
    name: show_target_stats
    id: show_target_stats
    optimistic: true
    internal: true
    on_turn_off:
      - lambda: 'return clearTargets();'

  - platform: template
    name: mmwave_sensor
    id: mmwave_sensor # do not change
    entity_category: config
    optimistic: true
    turn_on_action:
      then:
        - script.execute: turn_on_mmwave_sensor
    turn_off_action:
      then:
        - script.execute: turn_off_mmwave_sensor

  - platform: template
    name: led
    id: led  # do not change
    entity_category: config
    optimistic: true
    turn_on_action:
      then:
        - if:
            condition:
              or:
                - script.is_running: turn_on_led
                - script.is_running: turn_off_led
                - script.is_running: set_distance
                - script.is_running: set_latency
                - script.is_running: set_sensitivity
            then:
              - script.wait: turn_on_led
              - script.wait: turn_off_led
              - script.wait: set_distance
              - script.wait: set_latency
              - script.wait: set_sensitivity
              - delay: 100ms
              - script.execute: turn_on_led
            else:
              - delay: 100ms
              - script.execute: turn_on_led
    turn_off_action:
      then:
        - if:
            condition:
              or:
                - script.is_running: turn_on_led
                - script.is_running: turn_off_led
                - script.is_running: set_distance
                - script.is_running: set_latency
                - script.is_running: set_sensitivity
            then:
              - script.wait: turn_on_led
              - script.wait: turn_off_led
              - script.wait: set_distance
              - script.wait: set_latency
              - script.wait: set_sensitivity
              - delay: 100ms
              - script.execute: turn_off_led
            else:
              - delay: 100ms
              - script.execute: turn_off_led

number:
  - platform: template
    name: "Temperature Offset"
    id: temperature_offset_ui
    unit_of_measurement: "Â°C"
    min_value: -20
    max_value: 20
    step: 0.1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:thermometer"
    entity_category: config
    on_value:
      - lambda: 'id(shtc3_sensor).update();'

  - platform: template
    name: "Humidity Offset"
    id: humidity_offset_ui
    unit_of_measurement: "%"
    min_value: -50
    max_value: 50
    step: 0.1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:water-percent"
    entity_category: config
    on_value:
      - lambda: 'id(shtc3_sensor).update();'

  - platform: template
    name: "Illuminance Offset"
    id: illuminance_offset_ui
    unit_of_measurement: "lx"
    min_value: -50
    max_value: 50
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:brightness-5"
    entity_category: config
    on_value:
      - lambda: 'id(illuminance_sensor).update();'

  - platform: template
    name: distance
    id: distance # do not change
    entity_category: config
    min_value: 0.15
    max_value: 9.45
    step: 0.15
    unit_of_measurement: M
    mode: box
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getRange");
      return {};
    set_action:
      then:
        - globals.set:
            id: distance_global
            value: !lambda 'return x;'
        - if:
            condition:
              or:
                - script.is_running: turn_on_led
                - script.is_running: turn_off_led
                - script.is_running: set_distance
                - script.is_running: set_latency
                - script.is_running: set_sensitivity
            then:
              - script.wait: turn_on_led
              - script.wait: turn_off_led
              - script.wait: set_distance
              - script.wait: set_latency
              - script.wait: set_sensitivity
              - delay: 75ms
              - script.execute: set_distance
            else:
              - delay: 75ms
              - script.execute: set_distance 
      
  - platform: template
    name: latency
    id: latency # do not change
    entity_category: config
    min_value: 1
    max_value: 600
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getLatency");
      return {};
    step: 1
    unit_of_measurement: s
    mode: box
    set_action:
      then:
        - globals.set:
            id: latency_global
            value: !lambda 'return x;'
        - if:
            condition:
              or:
                - script.is_running: turn_on_led
                - script.is_running: turn_off_led
                - script.is_running: set_distance
                - script.is_running: set_latency
                - script.is_running: set_sensitivity
            then:
              - script.wait: turn_on_led
              - script.wait: turn_off_led
              - script.wait: set_distance
              - script.wait: set_latency
              - script.wait: set_sensitivity
              - delay: 50ms
              - script.execute: set_latency
            else:
              - delay: 50ms
              - script.execute: set_latency

  - platform: template
    name: sensitivity
    id: sensitivity # do not change
    entity_category: config
    min_value: 0
    max_value: 9
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getSensitivity");
      return {};
    step: 1
    set_action:
      then:
        - globals.set:
            id: sensitivity_global
            value: !lambda 'return x;'
        - if:
            condition:
              or:
                - script.is_running: turn_on_led
                - script.is_running: turn_off_led
                - script.is_running: set_distance
                - script.is_running: set_latency
                - script.is_running: set_sensitivity
            then:
              - script.wait: turn_on_led
              - script.wait: turn_off_led
              - script.wait: set_distance
              - script.wait: set_latency
              - script.wait: set_sensitivity
              - delay: 25ms
              - script.execute: set_sensitivity
            else:
              - delay: 25ms
              - script.execute: set_sensitivity

button:
  - platform: restart
    name: Restart_ESP_${device_name}
    entity_category: diagnostic
    on_press:
      - uart.write:
          id: uart_bus
          data: "resetSystem 0"

  - platform: template
    name: factory_reset_mmwMCU_${device_name}
    id: factory_reset_mmwMCU
    entity_category: diagnostic
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "resetCfg"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

# button:
#   - platform: restart
#     id: restart_internal
#     entity_category: config
#     internal: true

#   - platform: template
#     name: Restart mmWave sensor
#     id: restart_mmwave
#     entity_category: config
#     internal: true
#     on_press:
#       - uart.write: "resetSystem"

#   - platform: template
#     name: Restart
#     icon: mdi:restart
#     entity_category: config
#     disabled_by_default: True
#     on_press:
#       - button.press: restart_mmwave
#       - button.press: restart_internal

#   - platform: safe_mode
#     internal: false
#     name: Safe mode
#     entity_category: config
#     disabled_by_default: True

#   - platform: template
#     name: Factory reset mmWave
#     icon: mdi:cog-counterclockwise
#     id: factory_reset_mmwave
#     internal: ${factory_reset_disabled}
#     entity_category: config
#     on_press:
#       - switch.turn_off: mmwave_sensor
#       - delay: 1s
#       - uart.write: "resetCfg"
#       - delay: 3s
#       - switch.turn_on: mmwave_sensor


globals:
  - id: distance_global
    type: float
  - id: latency_global
    type: float
  - id: sensitivity_global
    type: int

script:
  - id: turn_on_mmwave_sensor
    then:
      - uart.write: "setUartOutput 1 0"
      - delay: 1s
      - uart.write: "setUartOutput 2 1 1 2"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s 
      - uart.write: "sensorStart"

  - id: turn_off_mmwave_sensor
    then:
      - uart.write: "sensorStop"

  - id: turn_on_led
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 0"
      - delay: 1s
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getLedMode 1");
      - delay: 1s 
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays
    
  - id: turn_off_led
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 1"
      - delay: 1s
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getLedMode 1");
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays

  - id: set_distance
    mode: queued
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string range = "setRange 0 " + str_sprintf("%.2f", id(distance_global));
          return std::vector<unsigned char>(range.begin(), range.end());
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays

  - id: set_latency
    mode: queued
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string setL = "setLatency 0.1 " + str_sprintf("%.0f", id(latency_global));
          return std::vector<unsigned char>(setL.begin(), setL.end());
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays

  - id: set_sensitivity
    mode: queued
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string mss = "setSensitivity " + to_string(id(sensitivity_global));
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays
      